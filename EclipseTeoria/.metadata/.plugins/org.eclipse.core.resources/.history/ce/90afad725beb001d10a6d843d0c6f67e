package esempio5;

public class ImplReal implements Real {
	protected double re;

	public ImplReal(double x) {
		re = x;
	}

	@Override
	public double getRealPart() {
		return this.re;
	}

	@Override
	public double getImPart() {
		return 0;
	}

	@Override
	public Complex sum(Complex z) {
		return new ImplComplex(re + z.getRealPart(), z.getImPart());
	}

	@Override
	public Complex sub(Complex z) {
		return new ImplComplex(re - z.getRealPart(), z.getImPart());
	}

	@Override
	public Complex mul(Complex z) {
		return new ImplComplex(re * z.getRealPart(), re * z.getImPart());
	}

	@Override
	public Complex div(Complex z) {
		return new ImplComplex(re / z.getRealPart(), re / z.getImPart());
	}

	public Complex cgt() {
		return this;
	}

	@Override
	public Complex cgt(Complex z) {
		return this;
	}

	@Override
	public Complex divByFactor(double x) {
		return new ImplReal(re / x);
	}

	/**
	 * Calculates the squared module of the complex number.
	 * @return The squared module of the complex number.
	 */
	@Override
	public double squaredModule() {
	    return getRealPart() * getRealPart() + getImPart() * getImPart();
	}

	/**
	 * Returns a new Real number representing the sum of this Real number and another Real number.
	 * @param x The other Real number.
	 * @return A new Real number representing the sum of this Real number and another Real number.
	 */
	@Override
	public Real sum(Real x) {
	    return new ImplReal(getRealPart() + x.getRealPart());
	}

	/**
	 * Returns a new Real number representing the subtraction of this Real number and another Real number.
	 * @param x The other Real number.
	 * @return A new Real number representing the subtraction of this Real number and another Real number.
	 */
	@Override
	public Real sub(Real x) {
	    return new ImplReal(getRealPart() - x.getRealPart());
	}

	/**
	 * Returns a new Real number representing the multiplication of this Real number and another Real number.
	 * @param x The other Real number.
	 * @return A new Real number representing the multiplication of this Real number and another Real number.
	 */
	@Override
	public Real mul(Real x) {
	    return new ImplReal(getRealPart() * x.getRealPart());
	}

	/**
	 * Returns a new Real number representing the division of this Real number by another Real number.
	 * @param x The other Real number.
	 * @return A new Real number representing the division of this Real number by another Real number.
	 */
	@Override
	public Real div(Real x) {
	    return new ImplReal(getRealPart() / x.getRealPart());
	
	}

}
