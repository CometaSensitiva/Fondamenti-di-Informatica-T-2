package esempio3;

public interface TriangleFactory {
	static Triangle of(double side1, double side2, double side3) {
		if (side1 == side2 && side2 == side3) {
			return new ImplEquilateralTriangle(side1);
		} else if (Math.pow(side1, 2) + Math.pow(side2, 2) == Math.pow(side3, 2)) {
			if (side1 == side2 || side1 == side3 || side2 == side3) {
				return RightIsoscelesTriangle.of(side1);
			} else {
				return RightTriangle.of(side1, side2);
			}
		} else if (Math.pow(side1, 2) + Math.pow(side3, 2) == Math.pow(side2, 2)) {
			if (side1 == side2 || side1 == side3 || side2 == side3) {
				return RightIsoscelesTriangle.of(side1);
			} else {
				return RightTriangle.of(side1, side3);
			}
		} else if (Math.pow(side2, 2) + Math.pow(side3, 2) == Math.pow(side1, 2)) {
			if (side1 == side2 || side1 == side3 || side2 == side3) {
				return RightIsoscelesTriangle.of(side1);
			} else {
				return RightTriangle.of(side2, side3);
			}
		}
		else if (side1 == side2 || side1 == side3 || side2 == side3) {
			double base = (side1 == side2) ? side3 : (side1 == side3) ? side2 : side1;
			double sides = side1;
			return IsoscelesTriangle.of(base, sides);
		} else {
			return Triangle.of(side1, side2, side3);
		}
	}
}
