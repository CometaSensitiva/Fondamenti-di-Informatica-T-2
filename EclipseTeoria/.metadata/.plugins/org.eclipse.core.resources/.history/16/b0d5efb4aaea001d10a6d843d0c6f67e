package esempio3test;

import esempio3.*;
import org.junit.Test;
import static org.junit.Assert.*;

public class TestImplQuadrilateral {

	// Test case for a valid quadrilateral
	@Test
	public void testValidQuadrilateral() {
		ImplQuadrilateral quad = new ImplQuadrilateral(3, 4, 5, 6, Math.PI / 3, Math.PI / 2, Math.PI / 3, Math.PI / 2);
		assertEquals(3, quad.a, 0);
		assertEquals(4, quad.b, 0);
		assertEquals(5, quad.c, 0);
		assertEquals(6, quad.d, 0);
		assertEquals(Math.PI / 3, quad.angleDAB, 0);
		assertEquals(Math.PI / 2, quad.angleABC, 0);
		assertEquals(Math.PI / 3, quad.angleBCD, 0);
		assertEquals(Math.PI / 2, quad.angleCDA, 0);
	}

	// Test case for an invalid quadrilateral (sum of opposite sides not equal)
	@Test(expected = IllegalArgumentException.class)
	public void testInvalidQuadrilateralSumOfOppositeSides() {
		ImplQuadrilateral quad = new ImplQuadrilateral(3, 4, 5, 7, Math.PI / 3, Math.PI / 2, Math.PI / 3, Math.PI / 2);
	}

	// Test case for an invalid quadrilateral (one side length negative)
	@Test(expected = IllegalArgumentException.class)
	public void testInvalidQuadrilateralNegativeSide() {
		ImplQuadrilateral quad = new ImplQuadrilateral(-3, 4, 5, 6, Math.PI / 3, Math.PI / 2, Math.PI / 3, Math.PI / 2);
	}

	// Test case for area calculation
	@Test
	public void testArea() {
		ImplQuadrilateral quad = new ImplQuadrilateral(3, 4, 5, 6, Math.PI / 3, Math.PI / 2, Math.PI / 3, Math.PI / 2);
		assertEquals(12.305, quad.getArea(), 0.001);
	}

	// Test case for perimeter calculation
	@Test
	public void testPerimeter() {
		ImplQuadrilateral quad = new ImplQuadrilateral(3, 4, 5, 6, Math.PI / 3, Math.PI / 2, Math.PI / 3, Math.PI / 2);
		assertEquals(18, quad.getPerimeter(), 0);
	}

}
