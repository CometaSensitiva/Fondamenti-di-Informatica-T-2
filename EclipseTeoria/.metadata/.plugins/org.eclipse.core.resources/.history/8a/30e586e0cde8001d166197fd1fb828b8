package esempio3;

public class ImplTriangle implements Shape, Triangle {

	private double side1, side2, side3;

	private double angleOppositeSide1 = -1, angleOppositeSide2 = -1, angleOppositeSide3 = -1;

	public ImplTriangle(double side1, double side2, double side3) throws IllegalArgumentException {
		if (side1 > 0 && side2 > 0 && side3 > 0 && side1 < side2 + side3 && side2 < side1 + side3
				&& side3 < side1 + side2) {
			this.side1 = side1;
			this.side2 = side2;
			this.side3 = side3;
		} else
			throw new IllegalArgumentException("Cannot construct a triangle with the specified side lengths.");

	}

	@Override
	public double getSide1() {
		return side1;
	}

	@Override
	public double getSide2() {
		return side2;
	}

	@Override
	public double getSide3() {
		return side3;
	}

	@Override
	public double getAngleOppositeSide1() {
		if (angleOppositeSide1 == -1)
			angleOppositeSide1 = Math
					.acos((-(getSide1() * getSide1()) + (getSide2() * getSide2()) + (getSide3() * getSide3()))
							/ (2 * getSide2() * getSide3()));
		return angleOppositeSide1;
	}

	@Override
	public double getAngleOppositeSide2() {
		if (angleOppositeSide2 == -1)
			angleOppositeSide2 = Math
					.acos((-(getSide2() * getSide2()) + (getSide1() * getSide1()) + (getSide3() * getSide3()))
							/ (2 * getSide2() * getSide3()));
		return angleOppositeSide2;
	}

	@Override
	public double getAngleOppositeSide3() {
		if (angleOppositeSide3 == -1)
			angleOppositeSide2 = Math
					.acos((-(getSide3() * getSide3()) + (getSide1() * getSide1()) + (getSide2() * getSide2()))
							/ (2 * getSide1() * getSide2()));
		return angleOppositeSide3;
	}

	@Override
	public double getHeight1() {
		return side3 * Math.sin(getAngleOppositeSide2());
	}

	@Override
	public double getHeight2() {
		return side1 * Math.sin(getAngleOppositeSide3());
	}

	@Override
	public double getHeight3() {
		return side2 * Math.sin(getAngleOppositeSide1());
	}

	@Override
	public double getArea() {
		double s = getPerimeter() / 2;
		return Math.sqrt(s * (s - getSide1()) * (s - getSide2()) * (s - getSide3()));
	}

	@Override
	public double getPerimeter() {
		return getSide1() + getSide2() + getSide3();
	}

	@Override
	public String getNome() {
		return "A Triangle";
	}
}
