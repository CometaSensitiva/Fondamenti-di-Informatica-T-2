package esempio3;

import java.util.Arrays;

public class ImplQuadrilateral implements Quadrilateral, Shape {
	public double a, b, c, d;
	public double angleDAB, angleABC, angleBCD, angleCDA;

	public ImplQuadrilateral(double a, double b, double c, double d, double angleDAB, double angleABC, double angleBCD,
			double angleCDA) throws IllegalArgumentException {
		if (isValidQuadrilateral(a, b, c, d, angleDAB, angleABC, angleBCD, angleCDA)) {
			this.a = a;
			this.b = b;
			this.c = c;
			this.d = d;
			this.angleDAB = angleDAB;
			this.angleABC = angleABC;
			this.angleBCD = angleBCD;
			this.angleCDA = angleCDA;
		} else
			throw new IllegalArgumentException("Cannot construct a triangle with the specified arguments");
	}

	public ImplQuadrilateral(double a, double b, double c, double d, double angleCDA) throws IllegalArgumentException {
		if(arePositiveSides(a, b, c, d)&&isValidTriangleInequality(a, b, c, d) && isValidAngle(angleCDA))
			
			else 
				throw new IllegalArgumentException("Cannot construct a triangle with the specified arguments");
		
	}

	public boolean isValidAngle(double angleCDA) {
		return angleCDA > 0 && angleCDA < Math.PI;
	}

	public boolean isValidQuadrilateral(double a, double b, double c, double d, double angleDAB, double angleABC,
			double angleBCD, double angleCDA) {
		return arePositiveSides(a, b, c, d) && isValidTriangleInequality(a, b, c, d)
				&& !areValidAngles(angleDAB, angleABC, angleBCD, angleCDA);
	}

	public boolean arePositiveSides(double a, double b, double c, double d) {
		return a > 0 && b > 0 && c > 0 && d > 0;
	}

	public boolean isValidTriangleInequality(double a, double b, double c, double d) {
		return a > b + c + d && b > a + c + d && c > a + b + d && d > a + b + c;
	}

	public boolean areValidAngles(double angleDAB, double angleABC, double angleBCD, double angleCDA) {
		return (angleDAB < Math.PI && angleABC < Math.PI && angleBCD < Math.PI && angleCDA < Math.PI)
				&& (angleDAB + angleABC + angleBCD + angleCDA) < 2 * Math.PI;
	}

	@Override
	public double getArea() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public double getPerimeter() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public String getName() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public double getSide1() {
		return a;
	}

	@Override
	public double getSide2() {
		return b;
	}

	@Override
	public double getSide3() {
		return c;
	}

	@Override
	public double getSide4() {
		return d;
	}

	@Override
	public double getDiagonal1() {
		return Math.sqrt((getSide1()*getSide1())+(getSide4()*getSide4()-2*(getSide1()*getSide4()*Math.cos(getAngle1()))));
	}

	@Override
	public double getDiagonal2() {
		return Math.sqrt((getSide3()*getSide3())+(getSide4()*getSide4()-getSide3()*getSide4()*Math.cos(getAngle4())));
	}

	@Override
	public double getHeight1() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public double getHeight2() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public double getAngle1() {
		return angleDAB;
	}

	@Override
	public double getAngle2() {
		return angleABC;
	}

	@Override
	public double getAngle3() {
		return angleBCD;
	}

	@Override
	public double getAngle4() {
		return angleCDA;
	}

	@Override
	public double isConcave() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public double isConvex() {
		// TODO Auto-generated method stub
		return 0;
	}

}
