package esempio3;

import java.util.Arrays;

/**
 * A factory for creating different types of triangles based on their side
 * lengths.
 */
public interface TriangleFactory {

	/**
	 * Creates a triangle with the specified side lengths.
	 *
	 * @param side1 the length of the first side
	 * @param side2 the length of the second side
	 * @param side3 the length of the third side
	 * @return a triangle object
	 * @throws IllegalArgumentException if any of the side lengths are not positive
	 */
	public static Triangle of(double side1, double side2, double side3) {
		if (Double.compare(side1, side2) == 0 && Double.compare(side2, side3) == 0) // check for equilateral triangle
			return EquilateralTriangle.of(side1);
		double[] sides = new double[] { side1, side2, side3 };
		Arrays.sort(sides);

		if (Double.compare(Math.pow(sides[0], 2) + Math.pow(sides[1], 2), Math.pow(sides[2], 2)) == 0) {
			if (Double.compare(sides[0], sides[1]) == 0) {
				return RightIsoscelesTriangle.of(sides[0]);
			}
			return RightTriangle.of(sides[0], sides[1]);
		}

		else if (Double.compare(sides[0], sides[1]) == 0 || Double.compare(sides[1], sides[2]) == 0) {
			double base = sides[2];
			double sidesLength = sides[0] == sides[1] ? sides[0] : sides[1];
			return IsoscelesTriangle.of(base, sidesLength);
		}
		return Triangle.of(sides[0], sides[1], sides[2]);
	}
}
